//URL: https://leetcode.com/problems/minimum-depth-of-binary-tree/description/

//SOLUTION: 
class Solution {
    public int minDepth(TreeNode root) {
        // If the tree is empty, the minimum depth is 0
        if (root == null) {
            return 0;
        }

        // Initialize a queue to perform BFS
        Queue<TreeNode> queue = new LinkedList<>();
        // Add the root node to the queue
        queue.offer(root);
        // Initialize depth to 1 (since root itself is a level)
        int depth = 1;

        // Perform BFS until the queue is empty
        while (!queue.isEmpty()) {
            // Get the number of nodes at the current level
            int size = queue.size();
            // Iterate through all nodes at the current level
            for (int i = 0; i < size; i++) {
                // Dequeue the front node
                TreeNode node = queue.poll();
                // If this is a leaf node, return the current depth
                if (node.left == null && node.right == null) {
                    return depth;
                }
                // If the node has a left child, add it to the queue
                if (node.left != null) {
                    queue.offer(node.left);
                }
                // If the node has a right child, add it to the queue
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            // Increment depth after processing all nodes at the current level
            depth++;
        }

        return depth; // Return the minimum depth found
    }
}
