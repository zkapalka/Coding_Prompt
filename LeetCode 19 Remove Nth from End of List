//URL: https://leetcode.com/problems/remove-nth-node-from-end-of-list/?envType=list&envId=oizxjoit

//SOLUTION: 

class Solution {
  public ListNode removeNthFromEnd(ListNode head, int n) {
    // Initialize two pointers, `slow` and `fast`, both starting at the head of the list.
    ListNode slow = head;
    ListNode fast = head;

    // Move the `fast` pointer `n` steps ahead in the list.
    while (n-- > 0)
      fast = fast.next;

    // If `fast` is null after moving `n` steps, it means we're trying to remove the head node
    // because `n` is equal to the length of the list. So, we simply return the next node.
    if (fast == null)
      return head.next;

    // Move both `slow` and `fast` pointers one step at a time until `fast` reaches the end of the list.
    // The `slow` pointer will then be at the node just before the node that needs to be removed.
    while (fast.next != null) {
      slow = slow.next;
      fast = fast.next;
    }

    // The node after `slow` is the one to be removed.
    // So, we adjust the `next` pointer of `slow` to skip the node that needs to be removed.
    slow.next = slow.next.next;

    // Return the head of the modified list.
    return head;
  }
}
