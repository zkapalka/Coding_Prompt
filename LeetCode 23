//URL: https://leetcode.com/problems/merge-k-sorted-lists/description/?envType=list&envId=oizxjoit

//SOLUTION: 

class Solution {
  // The main function that merges k sorted linked lists
  public ListNode mergeKLists(ListNode[] lists) {
    // Create a dummy node to act as the start of the merged list
    ListNode dummy = new ListNode(0);
    // Pointer to the current node in the merged list
    ListNode curr = dummy;
    
    // Priority Queue (Min-Heap) to store the nodes in a way that the smallest element is always at the top
    Queue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);

    // Add the head of each non-null list into the min-heap
    for (final ListNode list : lists) {
      if (list != null) {
        minHeap.offer(list); // Add the node to the min-heap
      }
    }

    // Process the min-heap until it's empty
    while (!minHeap.isEmpty()) {
      // Extract the smallest node from the min-heap
      ListNode minNode = minHeap.poll();
      
      // If the extracted node has a next node, add it to the min-heap
      if (minNode.next != null) {
        minHeap.offer(minNode.next);
      }
      
      // Link the current node to the extracted node
      curr.next = minNode;
      // Move the current pointer to the next node
      curr = curr.next;
    }

    // Return the merged list, starting from the node after the dummy node
    return dummy.next;
  }
}
