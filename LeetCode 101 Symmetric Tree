//URL: https://leetcode.com/problems/symmetric-tree/

//SOLUTION: 

class Solution {
  // Main method to check if a tree is symmetric
  public boolean isSymmetric(TreeNode root) {
    // Call the helper method to check symmetry, starting with the root compared to itself
    return isSymmetric(root, root);
  }

  // Helper method to recursively check if two subtrees are symmetric
  private boolean isSymmetric(TreeNode p, TreeNode q) {
    // If either node is null, return true only if both are null (they match)
    if (p == null || q == null)
      return p == q; // This means both are null or one is null, in which case they are symmetric only if both are null

    // Check if the values of the current nodes are equal and if their corresponding subtrees are symmetric
    return p.val == q.val && // Check if current nodes' values are equal
           isSymmetric(p.left, q.right) && // Check if the left subtree of p and right subtree of q are symmetric
           isSymmetric(p.right, q.left); // Check if the right subtree of p and left subtree of q are symmetric
  }
