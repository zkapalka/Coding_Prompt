//URL: https://leetcode.com/problems/search-in-rotated-sorted-array/description/?envType=list&envId=oizxjoit

//SOLUTION: 

class Solution {
  public int search(int[] nums, int target) {
    int l = 0; // Initialize the left pointer to the start of the array
    int r = nums.length - 1; // Initialize the right pointer to the end of the array

    // Perform binary search
    while (l <= r) {
      final int m = (l + r) / 2; // Calculate the middle index
      if (nums[m] == target) // If the middle element is the target, return the index
        return m;
      
      // Check if the left half (nums[l..m]) is sorted
      if (nums[l] <= nums[m]) {
        // If the target is within the range of the left half, move the right pointer to just before the middle
        if (nums[l] <= target && target < nums[m])
          r = m - 1;
        // Otherwise, move the left pointer to just after the middle
        else
          l = m + 1;
      } else { 
        // If the left half is not sorted, the right half (nums[m..r]) must be sorted
        // If the target is within the range of the right half, move the left pointer to just after the middle
        if (nums[m] < target && target <= nums[r])
          l = m + 1;
        // Otherwise, move the right pointer to just before the middle
        else
          r = m - 1;
      }
    }

    // If the target is not found, return -1
    return -1;
  }
}
