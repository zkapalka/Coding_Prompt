//URL: https://leetcode.com/problems/container-with-most-water/description/?envType=list&envId=oizxjoit

//SOLUTION:

class Solution {
    public int maxArea(int[] height) {
 
    // Initialize the maximum area to 0
    int maxArea = 0;
    // Initialize two pointers, one at the beginning and one at the end of the array
    int left = 0;
    int right = height.length - 1;

    // Loop until the two pointers meet
    while (left < right) {
      // Calculate the minimum height between the two pointers
      final int minHeight = Math.min(height[left], height[right]);
      // Calculate the area with the current pointers and update maxArea if it's larger
      maxArea = Math.max(maxArea, minHeight * (right - left));
      // Move the pointer pointing to the shorter line towards the other pointer
      if (height[left] < height[right])
        ++left;  // Move the left pointer to the right
      else
        --right; // Move the right pointer to the left
    }

    // Return the maximum area found
    return maxArea;


        
        
    }
}
