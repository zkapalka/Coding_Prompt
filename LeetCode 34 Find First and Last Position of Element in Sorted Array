//URL: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

//SOLUTION: 

class Solution {
    public int[] searchRange(int[] nums, int target) {
         // Find the first occurrence of the target
        int first = binarySearch(nums, target, true);
        // If target is not found, return [-1, -1]
        if (first == -1) {
            return new int[]{-1, -1};
        }
        // Find the last occurrence of the target
        int last = binarySearch(nums, target, false);
        return new int[]{first, last};
    }

    // Helper method to perform binary search
    private int binarySearch(int[] nums, int target, boolean findFirst) {
        int left = 0;
        int right = nums.length - 1;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                result = mid;
                // If we are finding the first occurrence, move left
                if (findFirst) {
                    right = mid - 1;
                } else { // Else move right to find the last occurrence
                    left = mid + 1;
                }
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return result;
    }
    }
