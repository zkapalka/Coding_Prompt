//URL: https://leetcode.com/problems/longest-common-prefix/submissions/1324240381/

//SOLUTION: 

class Solution {
  public String longestCommonPrefix(String[] strs) {
// Initial check to see if array is empty, to return it as empty
    if (strs.length == 0)
      return "";

//Outer loop This loop iterates over each character index i of the first string strs[0]. The assumption here is that the first string will provide the maximum potential common prefix.
    for (int i = 0; i < strs[0].length(); ++i)
//Inner loop This loop iterates over the remaining strings in the array, starting from the second string (j = 1).
      for (int j = 1; j < strs.length; ++j)

//comparsion logic
//i == strs[j].length(): This condition checks if the current index i has reached the end of the string strs[j]. 
//If it has, it means strs[j] is shorter than strs[0] and the common prefix cannot be longer than strs[j].
// strs[j].charAt(i) != strs[0].charAt(i): This condition checks if the character at index i in the string strs[j] is different from the character at the same index in strs[0]. 
// If they are different, it means the common prefix ends just before this index.
// return strs[0].substring(0, i): If either condition is true, the function returns the substring of strs[0] from the beginning up to (but not including) index i, 
// because this is the longest common prefix found so far.
        if (i == strs[j].length() || strs[j].charAt(i) != strs[0].charAt(i))
          return strs[0].substring(0, i);

//f the outer loop completes without finding any mismatches, it means the entire first string strs[0] is the common prefix among all the strings. Thus, the function returns strs[0].
    return strs[0];
  }
}
