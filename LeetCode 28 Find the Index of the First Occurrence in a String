//URL: https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/submissions/1325667819/

//Solution:

class Solution {
  // Public method that returns an int, and has two parameters: haystack and needle
  public int strStr(String haystack, String needle) {

    // Set up the variables to store the length of both strings given
    final int m = haystack.length();
    final int n = needle.length();

    // Main logic
    // This iterates through the haystack string to make sure that the needle could fit.
    // For example, if haystack is 8 characters long, and needle is 4 characters long, 
    // then the loop ensures there are enough characters left in haystack to match needle.
    // The loop condition (i < m - n + 1) means we stop when there are fewer than n characters left in haystack.
    for (int i = 0; i < m - n + 1; ++i)
      // haystack.substring(i, i + n) extracts a substring from haystack starting at index i 
      // and of length n (the length of needle).
      // The if statement checks if this substring matches needle.
      if (haystack.substring(i, i + n).equals(needle))
        return i;

    // If no match is found, return -1 indicating that needle is not present in haystack.
    return -1;
  }
}


//EXAMPLE

Detailed Walkthrough
Initialization:

Let's say haystack = "hello" and needle = "ll".
m = haystack.length() = 5
n = needle.length() = 2
First Iteration (i = 0):

i = 0
haystack.substring(0, 2) returns "he"
"he".equals("ll") is false (no match)
Second Iteration (i = 1):

i = 1
haystack.substring(1, 3) returns "el"
"el".equals("ll") is false (no match)
Third Iteration (i = 2):

i = 2
haystack.substring(2, 4) returns "ll"
"ll".equals("ll") is true (match found)
The method returns 2.
If No Match:

If needle is not found in haystack after iterating through all possible positions, the method would return -1.
